/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mongol.tori;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import jssc.*;

/**
 *
 * @author Razin
 */
public class Main2 extends javax.swing.JFrame implements KeyListener{
    public static SerialPort sp;
    Helper help = new Helper();
    private int c;
    public Main2() {
        initComponents();
        setFocusable(true);
        addKeyListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton3 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        title = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        wheel = new javax.swing.JPanel();
        btn_SearchCOMPorts = new javax.swing.JButton();
        Combobox = new javax.swing.JComboBox<>();
        btn_connect = new javax.swing.JButton();
        btn_disconnect = new javax.swing.JButton();
        btn_forward = new javax.swing.JButton();
        btn_backward = new javax.swing.JButton();
        btn_left = new javax.swing.JButton();
        btn_right = new javax.swing.JButton();
        btn_stop = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        arm = new javax.swing.JPanel();
        btn_baseL = new javax.swing.JButton();
        btn_baseR = new javax.swing.JButton();
        btn_acc1L = new javax.swing.JButton();
        btn_acc1R = new javax.swing.JButton();
        btn_acc2L = new javax.swing.JButton();
        btn_acc2R = new javax.swing.JButton();
        btn_wrist_up = new javax.swing.JButton();
        btn_wrist_down = new javax.swing.JButton();
        btn_wrist_left = new javax.swing.JButton();
        btn_wrist_right = new javax.swing.JButton();
        btn_claw_open = new javax.swing.JButton();
        btn_claw_close = new javax.swing.JButton();
        debugger = new javax.swing.JPanel();
        btn_debug = new javax.swing.JToggleButton();
        btn_keyboard = new javax.swing.JToggleButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_msg = new javax.swing.JTextArea();
        speed = new javax.swing.JPanel();
        slider_pwm = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        btn_pwm_0 = new javax.swing.JButton();
        btn_pwm_50 = new javax.swing.JButton();
        btn_pwm_100 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        btn_extd_close = new javax.swing.JButton();
        btn_extd_open = new javax.swing.JButton();
        btn_cam_left = new javax.swing.JButton();
        btn_cam_up = new javax.swing.JButton();
        btn_cam_right = new javax.swing.JButton();
        btn_cam_down = new javax.swing.JButton();
        footer = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        btn_exit = new javax.swing.JButton();
        btn_info = new javax.swing.JButton();
        btn_about = new javax.swing.JButton();

        jButton3.setText("jButton3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        title.setBackground(new java.awt.Color(0, 51, 51));
        title.setForeground(new java.awt.Color(255, 255, 255));
        title.setFocusable(false);

        jLabel3.setFont(new java.awt.Font("Malgun Gothic", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("BRACU MONGOL-TORI 2019");
        jLabel3.setFocusable(false);

        javax.swing.GroupLayout titleLayout = new javax.swing.GroupLayout(title);
        title.setLayout(titleLayout);
        titleLayout.setHorizontalGroup(
            titleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(titleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        titleLayout.setVerticalGroup(
            titleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
        );

        wheel.setBackground(new java.awt.Color(0, 51, 51));
        wheel.setFocusable(false);

        btn_SearchCOMPorts.setText("Search COM Ports");
        btn_SearchCOMPorts.setFocusable(false);
        btn_SearchCOMPorts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_SearchCOMPortsActionPerformed(evt);
            }
        });

        Combobox.setFocusable(false);

        btn_connect.setText("Connect");
        btn_connect.setFocusable(false);
        btn_connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_connectActionPerformed(evt);
            }
        });

        btn_disconnect.setText("Disconnect");
        btn_disconnect.setFocusable(false);
        btn_disconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_disconnectActionPerformed(evt);
            }
        });

        btn_forward.setBackground(new java.awt.Color(0, 51, 51));
        btn_forward.setForeground(new java.awt.Color(0, 51, 51));
        btn_forward.setFocusable(false);
        btn_forward.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_forwardActionPerformed(evt);
            }
        });

        btn_backward.setFocusable(false);
        btn_backward.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_backwardActionPerformed(evt);
            }
        });

        btn_left.setFocusable(false);
        btn_left.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_leftActionPerformed(evt);
            }
        });

        btn_right.setFocusable(false);
        btn_right.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_rightActionPerformed(evt);
            }
        });

        btn_stop.setFocusable(false);
        btn_stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_stopActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Available COM Ports");
        jLabel1.setFocusable(false);

        javax.swing.GroupLayout wheelLayout = new javax.swing.GroupLayout(wheel);
        wheel.setLayout(wheelLayout);
        wheelLayout.setHorizontalGroup(
            wheelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(wheelLayout.createSequentialGroup()
                .addGroup(wheelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(wheelLayout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(wheelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(Combobox, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(wheelLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(btn_SearchCOMPorts))
                    .addGroup(wheelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(wheelLayout.createSequentialGroup()
                            .addGroup(wheelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(wheelLayout.createSequentialGroup()
                                    .addGap(98, 98, 98)
                                    .addComponent(btn_backward, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, wheelLayout.createSequentialGroup()
                                    .addContainerGap()
                                    .addGroup(wheelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, wheelLayout.createSequentialGroup()
                                            .addComponent(btn_left, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(btn_stop, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(btn_forward, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btn_right, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, wheelLayout.createSequentialGroup()
                            .addGap(58, 58, 58)
                            .addComponent(btn_connect)))
                    .addGroup(wheelLayout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(btn_disconnect)))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        wheelLayout.setVerticalGroup(
            wheelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(wheelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(btn_SearchCOMPorts)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addGap(4, 4, 4)
                .addComponent(Combobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_connect)
                .addGap(38, 38, 38)
                .addComponent(btn_forward, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(wheelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btn_left, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_right, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_stop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(11, 11, 11)
                .addComponent(btn_backward, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(btn_disconnect)
                .addContainerGap(53, Short.MAX_VALUE))
        );

        arm.setBackground(new java.awt.Color(0, 51, 51));
        arm.setForeground(new java.awt.Color(0, 51, 51));
        arm.setFocusable(false);

        btn_baseL.setText("Base L");
        btn_baseL.setFocusable(false);
        btn_baseL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_baseLActionPerformed(evt);
            }
        });

        btn_baseR.setText("Base R");
        btn_baseR.setFocusable(false);
        btn_baseR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_baseRActionPerformed(evt);
            }
        });

        btn_acc1L.setText("Acc1 L");
        btn_acc1L.setFocusable(false);
        btn_acc1L.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_acc1LActionPerformed(evt);
            }
        });

        btn_acc1R.setText("Acc1 R");
        btn_acc1R.setFocusable(false);
        btn_acc1R.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_acc1RActionPerformed(evt);
            }
        });

        btn_acc2L.setText("Acc2 L");
        btn_acc2L.setFocusable(false);
        btn_acc2L.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_acc2LActionPerformed(evt);
            }
        });

        btn_acc2R.setText("Acc2 R");
        btn_acc2R.setFocusable(false);
        btn_acc2R.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_acc2RActionPerformed(evt);
            }
        });

        btn_wrist_up.setText("Wrist U");
        btn_wrist_up.setFocusable(false);
        btn_wrist_up.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_wrist_upActionPerformed(evt);
            }
        });

        btn_wrist_down.setText("Wrist D");
        btn_wrist_down.setFocusable(false);
        btn_wrist_down.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_wrist_downActionPerformed(evt);
            }
        });

        btn_wrist_left.setText("Wrist L");
        btn_wrist_left.setFocusable(false);
        btn_wrist_left.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_wrist_leftActionPerformed(evt);
            }
        });

        btn_wrist_right.setText("Wrist R");
        btn_wrist_right.setFocusable(false);
        btn_wrist_right.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_wrist_rightActionPerformed(evt);
            }
        });

        btn_claw_open.setText("Claw O");
        btn_claw_open.setFocusable(false);
        btn_claw_open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_claw_openActionPerformed(evt);
            }
        });

        btn_claw_close.setText("Claw C");
        btn_claw_close.setFocusable(false);
        btn_claw_close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_claw_closeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout armLayout = new javax.swing.GroupLayout(arm);
        arm.setLayout(armLayout);
        armLayout.setHorizontalGroup(
            armLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(armLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(armLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(armLayout.createSequentialGroup()
                        .addComponent(btn_claw_open)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_claw_close))
                    .addGroup(armLayout.createSequentialGroup()
                        .addComponent(btn_wrist_left)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_wrist_right))
                    .addGroup(armLayout.createSequentialGroup()
                        .addComponent(btn_acc2L)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_acc2R))
                    .addGroup(armLayout.createSequentialGroup()
                        .addComponent(btn_acc1L)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_acc1R))
                    .addGroup(armLayout.createSequentialGroup()
                        .addComponent(btn_baseL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_baseR))
                    .addGroup(armLayout.createSequentialGroup()
                        .addComponent(btn_wrist_up)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_wrist_down)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        armLayout.setVerticalGroup(
            armLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(armLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(armLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_baseL)
                    .addComponent(btn_baseR))
                .addGap(18, 18, 18)
                .addGroup(armLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_acc1L)
                    .addComponent(btn_acc1R))
                .addGap(18, 18, 18)
                .addGroup(armLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_acc2L)
                    .addComponent(btn_acc2R))
                .addGap(18, 18, 18)
                .addGroup(armLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_wrist_up)
                    .addComponent(btn_wrist_down))
                .addGap(18, 18, 18)
                .addGroup(armLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_wrist_left)
                    .addComponent(btn_wrist_right))
                .addGap(18, 18, 18)
                .addGroup(armLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_claw_open)
                    .addComponent(btn_claw_close))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        debugger.setBackground(new java.awt.Color(0, 51, 51));
        debugger.setFocusable(false);

        btn_debug.setText("Debug");
        btn_debug.setFocusable(false);
        btn_debug.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_debugActionPerformed(evt);
            }
        });

        btn_keyboard.setText("Keyboard");
        btn_keyboard.setFocusable(false);
        btn_keyboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_keyboardActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout debuggerLayout = new javax.swing.GroupLayout(debugger);
        debugger.setLayout(debuggerLayout);
        debuggerLayout.setHorizontalGroup(
            debuggerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(debuggerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btn_debug)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_keyboard)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        debuggerLayout.setVerticalGroup(
            debuggerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, debuggerLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(debuggerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_debug)
                    .addComponent(btn_keyboard))
                .addGap(23, 23, 23))
        );

        txt_msg.setColumns(20);
        txt_msg.setRows(5);
        txt_msg.setFocusable(false);
        jScrollPane1.setViewportView(txt_msg);

        speed.setBackground(new java.awt.Color(0, 51, 51));
        speed.setFocusable(false);

        slider_pwm.setForeground(new java.awt.Color(0, 51, 51));
        slider_pwm.setMajorTickSpacing(25);
        slider_pwm.setMinorTickSpacing(25);
        slider_pwm.setPaintLabels(true);
        slider_pwm.setPaintTicks(true);
        slider_pwm.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        slider_pwm.setDebugGraphicsOptions(javax.swing.DebugGraphics.BUFFERED_OPTION);
        slider_pwm.setFocusable(false);
        slider_pwm.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slider_pwmStateChanged(evt);
            }
        });

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Speed");
        jLabel2.setFocusable(false);

        btn_pwm_0.setBackground(new java.awt.Color(0, 51, 51));
        btn_pwm_0.setForeground(new java.awt.Color(0, 51, 51));
        btn_pwm_0.setBorder(null);
        btn_pwm_0.setBorderPainted(false);
        btn_pwm_0.setFocusPainted(false);
        btn_pwm_0.setFocusable(false);
        btn_pwm_0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_pwm_0ActionPerformed(evt);
            }
        });

        btn_pwm_50.setBackground(new java.awt.Color(0, 51, 51));
        btn_pwm_50.setBorder(null);
        btn_pwm_50.setBorderPainted(false);
        btn_pwm_50.setFocusPainted(false);
        btn_pwm_50.setFocusable(false);
        btn_pwm_50.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_pwm_50ActionPerformed(evt);
            }
        });

        btn_pwm_100.setBackground(new java.awt.Color(0, 51, 51));
        btn_pwm_100.setBorder(null);
        btn_pwm_100.setBorderPainted(false);
        btn_pwm_100.setFocusPainted(false);
        btn_pwm_100.setFocusable(false);
        btn_pwm_100.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_pwm_100ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout speedLayout = new javax.swing.GroupLayout(speed);
        speed.setLayout(speedLayout);
        speedLayout.setHorizontalGroup(
            speedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(speedLayout.createSequentialGroup()
                .addGroup(speedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(speedLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(slider_pwm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(speedLayout.createSequentialGroup()
                        .addGap(93, 93, 93)
                        .addComponent(jLabel2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(speedLayout.createSequentialGroup()
                .addGroup(speedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(speedLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btn_pwm_0))
                    .addGroup(speedLayout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(btn_pwm_50)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_pwm_100)
                .addGap(24, 24, 24))
        );
        speedLayout.setVerticalGroup(
            speedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, speedLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(slider_pwm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(speedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_pwm_0, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btn_pwm_100, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btn_pwm_50, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel2.setBackground(new java.awt.Color(0, 51, 51));

        btn_extd_close.setText("Extd Close");
        btn_extd_close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_extd_closeActionPerformed(evt);
            }
        });

        btn_extd_open.setText("Extd Open");
        btn_extd_open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_extd_openActionPerformed(evt);
            }
        });

        btn_cam_left.setText("Cam Left");
        btn_cam_left.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cam_leftActionPerformed(evt);
            }
        });

        btn_cam_up.setText("Cam Up");
        btn_cam_up.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cam_upActionPerformed(evt);
            }
        });

        btn_cam_right.setText("Cam Right");
        btn_cam_right.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cam_rightActionPerformed(evt);
            }
        });

        btn_cam_down.setText("Cam Down");
        btn_cam_down.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cam_downActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_extd_close)
                    .addComponent(btn_extd_open))
                .addGap(197, 197, 197)
                .addComponent(btn_cam_left)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btn_cam_down, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_cam_up, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_cam_right)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(btn_cam_up)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btn_cam_down))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(btn_extd_open)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_extd_close))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(btn_cam_right))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(btn_cam_left)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        footer.setBackground(new java.awt.Color(0, 51, 51));
        footer.setFocusable(false);

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Copyright 2019@vivex | All rights reserved.");
        jLabel5.setFocusable(false);

        btn_exit.setBackground(new java.awt.Color(0, 51, 51));
        btn_exit.setFocusable(false);
        btn_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_exitActionPerformed(evt);
            }
        });

        btn_info.setBackground(new java.awt.Color(0, 51, 51));
        btn_info.setFocusable(false);
        btn_info.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_infoActionPerformed(evt);
            }
        });

        btn_about.setBackground(new java.awt.Color(0, 51, 51));
        btn_about.setForeground(new java.awt.Color(0, 51, 51));
        btn_about.setFocusable(false);
        btn_about.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_aboutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout footerLayout = new javax.swing.GroupLayout(footer);
        footer.setLayout(footerLayout);
        footerLayout.setHorizontalGroup(
            footerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, footerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btn_exit, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_info, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_about, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addGap(51, 51, 51))
        );
        footerLayout.setVerticalGroup(
            footerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(footerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(footerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(footerLayout.createSequentialGroup()
                        .addGroup(footerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(btn_exit))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(btn_info, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, footerLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btn_about, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(title, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(wheel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(speed, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(debugger, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane1)
                                .addGap(18, 18, 18)
                                .addComponent(arm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(footer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(debugger, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(arm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(speed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1))
                    .addComponent(wheel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(footer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 551, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_SearchCOMPortsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_SearchCOMPortsActionPerformed
        
        String []port = SerialPortList.getPortNames();
        Combobox.setModel(new DefaultComboBoxModel(port));
    }//GEN-LAST:event_btn_SearchCOMPortsActionPerformed

    private void btn_connectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_connectActionPerformed
        System.out.println(Combobox.getSelectedItem());
        sp = new SerialPort((String) Combobox.getSelectedItem());
        try{
            sp.openPort();
            sp.setParams(sp.BAUDRATE_9600, sp.DATABITS_8, sp.STOPBITS_1, sp.PARITY_NONE);
            System.out.println("connected");
//            sp.closePort();
        }
        catch(SerialPortException ex){
            System.out.println(ex);
    }
                
    }//GEN-LAST:event_btn_connectActionPerformed

    private void btn_disconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_disconnectActionPerformed
        try {
            sp.closePort();
            System.out.println("Disconnect");
        } catch (SerialPortException ex) {
            Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_disconnectActionPerformed

    private void btn_forwardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_forwardActionPerformed
        try {
            sp.writeBytes("W".getBytes());
            System.out.println("Forward");
        } catch (SerialPortException ex) {
            Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_forwardActionPerformed

    private void btn_backwardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_backwardActionPerformed
        try {
            sp.writeBytes("S".getBytes());
            System.out.println("Backward");
        } catch (SerialPortException ex) {
            Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_backwardActionPerformed

    private void btn_rightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_rightActionPerformed
        try {
            sp.writeBytes("D".getBytes());
            System.out.println("Right");
        } catch (SerialPortException ex) {
            Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_rightActionPerformed

    private void btn_leftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_leftActionPerformed
        try {
            sp.writeBytes("A".getBytes());
            System.out.println("Left");
        } catch (SerialPortException ex) {
            Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_leftActionPerformed

    private void btn_baseRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_baseRActionPerformed
        try {
            sp.writeBytes("M".getBytes());
            System.out.println("Base Right");
        } catch (SerialPortException ex) {
            Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_baseRActionPerformed

    private void btn_baseLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_baseLActionPerformed
        try {
            sp.writeBytes("N".getBytes());
            System.out.println("Base Left");
        } catch (SerialPortException ex) {
            Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_baseLActionPerformed

    private void btn_acc2RActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_acc2RActionPerformed
        try {
            sp.writeBytes("T".getBytes());
            System.out.println("Acc 2 Open");
        } catch (SerialPortException ex) {
            Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_acc2RActionPerformed

    private void btn_wrist_upActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_wrist_upActionPerformed
        try {
            sp.writeBytes("Y".getBytes());
            System.out.println("Wrist Up");
        } catch (SerialPortException ex) {
            Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_wrist_upActionPerformed

    private void btn_acc1LActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_acc1LActionPerformed
        try {
            sp.writeBytes("F".getBytes());
            System.out.println("Acc 1 Close");
        } catch (SerialPortException ex) {
            Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_acc1LActionPerformed

    private void btn_acc1RActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_acc1RActionPerformed
        try {
            sp.writeBytes("R".getBytes());
            System.out.println("Acc 1 Open");
        } catch (SerialPortException ex) {
            Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_acc1RActionPerformed

    private void btn_acc2LActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_acc2LActionPerformed
        try {
            sp.writeBytes("G".getBytes());
            System.out.println("Acc 2 Close");
        } catch (SerialPortException ex) {
            Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_acc2LActionPerformed

    private void btn_wrist_downActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_wrist_downActionPerformed
        try {
            sp.writeBytes("H".getBytes());
            System.out.println("Wrist Down");
        } catch (SerialPortException ex) {
            Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_wrist_downActionPerformed

    private void btn_wrist_leftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_wrist_leftActionPerformed
        try {
            sp.writeBytes("J".getBytes());
            System.out.println("Wrist Left");
        } catch (SerialPortException ex) {
            Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_wrist_leftActionPerformed

    private void btn_wrist_rightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_wrist_rightActionPerformed
        try {
            sp.writeBytes("K".getBytes());
            System.out.println("Wrist Right");
        } catch (SerialPortException ex) {
            Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_wrist_rightActionPerformed

    private void btn_claw_openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_claw_openActionPerformed
        try {
            sp.writeBytes("O".getBytes());
            System.out.println("Claw Open");
        } catch (SerialPortException ex) {
            Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_claw_openActionPerformed

    private void btn_claw_closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_claw_closeActionPerformed
        try {
            sp.writeBytes("P".getBytes());
            System.out.println("Claw Close");
        } catch (SerialPortException ex) {
            Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_claw_closeActionPerformed

    private void btn_stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_stopActionPerformed
        try {
            sp.writeBytes("B".getBytes());
            System.out.println("Stop");
        } catch (SerialPortException ex) {
            Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_stopActionPerformed

    private void btn_keyboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_keyboardActionPerformed
        if(btn_keyboard.isSelected()){
          //KeyController key = new KeyController(this);
          //key.correspondingKey();
          this.btn_keyboard.setEnabled(false);
          this.btn_keyboard.setBackground(Color.green);
        }
        else
        {
          this.btn_keyboard.setBackground(Color.red);
          this.btn_keyboard.setEnabled(true);
        }
    }//GEN-LAST:event_btn_keyboardActionPerformed

    private void slider_pwmStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slider_pwmStateChanged
        int value = slider_pwm.getValue();
        switch (value) {
        case 0: 
          this.help.pwm("0");
          printMsg("Speed set to: 0%");
          break;
        case 25: 
          this.help.pwm("1");
          printMsg("Speed set to: 25%");
          break;
        case 50: 
          this.help.pwm("2");
          printMsg("Speed set to: 50%");
          break;
        case 75: 
          this.help.pwm("3");
          printMsg("Speed set to: 75%");
          break;
        case 100: 
          this.help.pwm("4");
          printMsg("Speed set to: 100%");
          break; 
        }
    }//GEN-LAST:event_slider_pwmStateChanged

    private void btn_debugActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_debugActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_debugActionPerformed

    private void btn_pwm_50ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_pwm_50ActionPerformed
        slider_pwm.setValue(50);
    }//GEN-LAST:event_btn_pwm_50ActionPerformed

    private void btn_pwm_0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_pwm_0ActionPerformed
        slider_pwm.setValue(0);
    }//GEN-LAST:event_btn_pwm_0ActionPerformed

    private void btn_pwm_100ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_pwm_100ActionPerformed
        slider_pwm.setValue(100);
    }//GEN-LAST:event_btn_pwm_100ActionPerformed

    private void btn_aboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_aboutActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_aboutActionPerformed

    private void btn_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_exitActionPerformed
        if (javax.swing.JOptionPane.showConfirmDialog(this, "Exit application ?", "Confirm Dialog", 2) == 0)
            {
            System.exit(0);
            }        
    }//GEN-LAST:event_btn_exitActionPerformed

    private void btn_infoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_infoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_infoActionPerformed

    private void btn_cam_rightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cam_rightActionPerformed
        try {
            sp.writeBytes(".".getBytes());
            System.out.println("Camera Right");
        } catch (SerialPortException ex) {
            Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_cam_rightActionPerformed

    private void btn_extd_openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_extd_openActionPerformed
        try {
            sp.writeBytes("Z".getBytes());
            System.out.println("Extender Open");
        } catch (SerialPortException ex) {
            Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_extd_openActionPerformed

    private void btn_extd_closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_extd_closeActionPerformed
        try {
            sp.writeBytes("X".getBytes());
            System.out.println("Extender Close");
        } catch (SerialPortException ex) {
            Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_extd_closeActionPerformed

    private void btn_cam_upActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cam_upActionPerformed
        try {
            sp.writeBytes(";".getBytes());
            System.out.println("Camera Up");
        } catch (SerialPortException ex) {
            Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_cam_upActionPerformed

    private void btn_cam_downActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cam_downActionPerformed
        try {
            sp.writeBytes("/".getBytes());
            System.out.println("Camera Down");
        } catch (SerialPortException ex) {
            Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_cam_downActionPerformed

    private void btn_cam_leftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cam_leftActionPerformed
        try {
            sp.writeBytes(",".getBytes());
            System.out.println("Camera Left");
        } catch (SerialPortException ex) {
            Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_cam_leftActionPerformed
    
    public void printMsg(String msg)
   {
     if (btn_debug.isSelected()) {
       txt_msg.append(msg + "\n");
     }
   }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main2().setVisible(true);
            }
        });
    }
    
    /**
     *
     * @param e
     */
    
    @Override
    public void keyPressed(KeyEvent e) {
        c++;
        if(e.getKeyCode() == KeyEvent.VK_W){
            if(c == 1){
                try {
                    sp.writeBytes("W".getBytes());
                    printMsg("Forward");
                    System.out.println("Forward");
                } catch (SerialPortException ex) {
                    Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        if(e.getKeyCode() == KeyEvent.VK_S){
            if(c == 1){
                try {
                    sp.writeBytes("S".getBytes());
                } catch (SerialPortException ex) {
                    Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
                }
                printMsg("Backward");
                System.out.println("Backward");
            }
        }
        if(e.getKeyCode() == KeyEvent.VK_A){
            if(c == 1){
                try {
                    sp.writeBytes("A".getBytes());
                } catch (SerialPortException ex) {
                    Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
                }
                printMsg("Left");
                System.out.println("Left");
            }
        }
        if(e.getKeyCode() == KeyEvent.VK_D){
            if(c == 1){
                try {
                    sp.writeBytes("D".getBytes());
                } catch (SerialPortException ex) {
                    Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
                }
                printMsg("Right");
                System.out.println("Right");
            }
        }
        if(e.getKeyCode() == KeyEvent.VK_M){
            if(c == 1){
                try {
                    sp.writeBytes("M".getBytes());
                } catch (SerialPortException ex) {
                    Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
                }
                printMsg("Base Clockwise");
                System.out.println("Base Clockwise");
            }
        }
        if(e.getKeyCode() == KeyEvent.VK_N){
            if(c == 1){
                try {
                    sp.writeBytes("N".getBytes());
                } catch (SerialPortException ex) {
                    Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
                }
                printMsg("Base Counter-clockwise");
                System.out.println("Base Counter-clockwise");
            }
        }
        if(e.getKeyCode() == KeyEvent.VK_R){
            if(c == 1){
                try {
                    sp.writeBytes("R".getBytes());
                } catch (SerialPortException ex) {
                    Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
                }
                printMsg("Actuator1 Open");
                System.out.println("Actuator1 Open");
            }
        }
        if(e.getKeyCode() == KeyEvent.VK_F){
            if(c == 1){
                try {
                    sp.writeBytes("F".getBytes());
                } catch (SerialPortException ex) {
                    Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
                }
                printMsg("Actuator1 Close");
                System.out.println("Actuator1 Close");
            }
        }
        if(e.getKeyCode() == KeyEvent.VK_T){
            if(c == 1){
                try {
                    sp.writeBytes("T".getBytes());
                } catch (SerialPortException ex) {
                    Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
                }
                printMsg("Actuator2 Open");
                System.out.println("Actuator2 Open");
            }
        }
        if(e.getKeyCode() == KeyEvent.VK_G){
            if(c == 1){
                try {
                    sp.writeBytes("G".getBytes());
                } catch (SerialPortException ex) {
                    Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
                }
                printMsg("Actuator2 Close");
                System.out.println("Actuator2 Close");
            }
        }
        if(e.getKeyCode() == KeyEvent.VK_Y){
            if(c == 1){
                try {
                    sp.writeBytes("Y".getBytes());
                } catch (SerialPortException ex) {
                    Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
                }
                printMsg("Wrist Up");
                System.out.println("Wrist Up");
            }
        }
        if(e.getKeyCode() == KeyEvent.VK_H){
            if(c == 1){
                try {
                    sp.writeBytes("H".getBytes());
                } catch (SerialPortException ex) {
                    Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
                }
                printMsg("Wrist Down");
                System.out.println("Wrist Down");
            }
        }
        if(e.getKeyCode() == KeyEvent.VK_J){
            if(c == 1){
                try {
                    sp.writeBytes("J".getBytes());
                } catch (SerialPortException ex) {
                    Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
                }
                printMsg("Wrist Left");
                System.out.println("Wrist Left");
            }
        }
        if(e.getKeyCode() == KeyEvent.VK_K){
            if(c == 1){
                try {
                    sp.writeBytes("K".getBytes());
                } catch (SerialPortException ex) {
                    Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
                }
                printMsg("Wrist Right");
                System.out.println("Wrist Right");
            }
        }
        if(e.getKeyCode() == KeyEvent.VK_O){
            if(c == 1){
                try {
                    sp.writeBytes("O".getBytes());
                } catch (SerialPortException ex) {
                    Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
                }
                printMsg("Claw Open");
                System.out.println("Claw Open");
            }
        }
        if(e.getKeyCode() == KeyEvent.VK_P){
            if(c == 1){
                try {
                    sp.writeBytes("P".getBytes());
                } catch (SerialPortException ex) {
                    Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
                }
                printMsg("Claw Close");
                System.out.println("Claw Close");
            }
        }
        if(e.getKeyCode() == KeyEvent.VK_Z){
            if(c == 1){
                try {
                    sp.writeBytes("Z".getBytes());
                } catch (SerialPortException ex) {
                    Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
                }
                printMsg("Extender Open");
                System.out.println("Extender Open");
            }
        }
        if(e.getKeyCode() == KeyEvent.VK_X){
            if(c == 1){
                try {
                    sp.writeBytes("X".getBytes());
                } catch (SerialPortException ex) {
                    Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
                }
                printMsg("Extender Close");
                System.out.println("Extender Close");
            }
        }
        if(e.getKeyCode() == KeyEvent.VK_SEMICOLON){
            if(c == 1){
                try {
                    sp.writeBytes(";".getBytes());
                } catch (SerialPortException ex) {
                    Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
                }
                printMsg("Camera Up");
                System.out.println("Camera Up");
            }
        }
        if(e.getKeyCode() == KeyEvent.VK_SLASH){
            if(c == 1){
                try {
                    sp.writeBytes("/".getBytes());
                } catch (SerialPortException ex) {
                    Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
                }
                printMsg("Camera Down");
                System.out.println("Camera Down");
            }
        }
        if(e.getKeyCode() == KeyEvent.VK_COMMA){
            if(c == 1){
                try {
                    sp.writeBytes(",".getBytes());
                } catch (SerialPortException ex) {
                    Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
                }
                printMsg("Camera Left");
                System.out.println("Camera Left");
            }
        }
        if(e.getKeyCode() == KeyEvent.VK_PERIOD){
            if(c == 1){
                try {
                    sp.writeBytes(".".getBytes());
                } catch (SerialPortException ex) {
                    Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
                }
                printMsg("Camera Right");
                System.out.println("Camera Right");
            }
        }
        if(e.getKeyCode() == KeyEvent.VK_EQUALS){
            if(c == 1){
                try {
                    sp.writeBytes("=".getBytes());
                } catch (SerialPortException ex) {
                    Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
                }
                printMsg("PWM ++");
                System.out.println("PWM ++");
            }
        }
        if(e.getKeyCode() == KeyEvent.VK_MINUS){
            if(c == 1){
                try {
                    sp.writeBytes("-".getBytes());
                } catch (SerialPortException ex) {
                    Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
                }
                printMsg("PWM --");
                System.out.println("PWM --");
            }
        }
        if(e.getKeyCode() == KeyEvent.VK_NUMPAD0){
            if(c == 1){
                try {
                    sp.writeBytes("0".getBytes());
                } catch (SerialPortException ex) {
                    Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
                }
                printMsg("PWM 0");
                System.out.println("PWM 0");
            }
        }
    }
    @Override
    public void keyReleased(KeyEvent e) {
        c = 0;
        if(e.getKeyCode() == KeyEvent.VK_W){
            try {
                sp.writeBytes("B".getBytes());
            } catch (SerialPortException ex) {
                Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
            }
            printMsg("stop");
            System.out.println("stop");
        }
        if(e.getKeyCode() == KeyEvent.VK_S){
            try {
                sp.writeBytes("B".getBytes());
            } catch (SerialPortException ex) {
                Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
            }
            printMsg("stop");
            System.out.println("stop");
        }
        if(e.getKeyCode() == KeyEvent.VK_A){
            try {
                sp.writeBytes("B".getBytes());
            } catch (SerialPortException ex) {
                Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
            }
            printMsg("stop");
            System.out.println("stop");
        }
        if(e.getKeyCode() == KeyEvent.VK_D){
            try {
                sp.writeBytes("B".getBytes());
            } catch (SerialPortException ex) {
                Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
            }
            printMsg("stop");
            System.out.println("stop");
        }
        if(e.getKeyCode() == KeyEvent.VK_M){
            try {
                sp.writeBytes("B".getBytes());
            } catch (SerialPortException ex) {
                Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
            }
            printMsg("stop");
            System.out.println("stop");
        }
        if(e.getKeyCode() == KeyEvent.VK_N){
            try {
                sp.writeBytes("B".getBytes());
            } catch (SerialPortException ex) {
                Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
            }
            printMsg("stop");
            System.out.println("stop");
        }
        if(e.getKeyCode() == KeyEvent.VK_R){
            try {
                sp.writeBytes("B".getBytes());
            } catch (SerialPortException ex) {
                Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
            }
            printMsg("stop");
            System.out.println("stop");
        }
        if(e.getKeyCode() == KeyEvent.VK_F){
            try {
                sp.writeBytes("B".getBytes());
            } catch (SerialPortException ex) {
                Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
            }
            printMsg("stop");
            System.out.println("stop");
        }
        if(e.getKeyCode() == KeyEvent.VK_T){
            try {
                sp.writeBytes("B".getBytes());
            } catch (SerialPortException ex) {
                Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
            }
            printMsg("stop");
            System.out.println("stop");
        }
        if(e.getKeyCode() == KeyEvent.VK_G){
            try {
                sp.writeBytes("B".getBytes());
            } catch (SerialPortException ex) {
                Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
            }
            printMsg("stop");
            System.out.println("stop");
        }
        if(e.getKeyCode() == KeyEvent.VK_Y){
            try {
                sp.writeBytes("B".getBytes());
            } catch (SerialPortException ex) {
                Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
            }
            printMsg("stop");
            System.out.println("stop");
        }
        if(e.getKeyCode() == KeyEvent.VK_H){
            try {
                sp.writeBytes("B".getBytes());
            } catch (SerialPortException ex) {
                Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
            }
            printMsg("stop");
            System.out.println("stop");
        }
        if(e.getKeyCode() == KeyEvent.VK_J){
            try {
                sp.writeBytes("B".getBytes());
            } catch (SerialPortException ex) {
                Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
            }
            printMsg("stop");
            System.out.println("stop");
        }
        if(e.getKeyCode() == KeyEvent.VK_K){
            try {
                sp.writeBytes("B".getBytes());
            } catch (SerialPortException ex) {
                Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
            }
            printMsg("stop");
            System.out.println("stop");
        }
        if(e.getKeyCode() == KeyEvent.VK_O){
            try {
                sp.writeBytes("B".getBytes());
            } catch (SerialPortException ex) {
                Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
            }
            printMsg("stop");
            System.out.println("stop");
        }
        if(e.getKeyCode() == KeyEvent.VK_P){
            try {
                sp.writeBytes("B".getBytes());
            } catch (SerialPortException ex) {
                Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
            }
            printMsg("stop");
            System.out.println("stop");
        }
        if(e.getKeyCode() == KeyEvent.VK_Z){
            try {
                sp.writeBytes("B".getBytes());
            } catch (SerialPortException ex) {
                Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
            }
            printMsg("stop");
            System.out.println("stop");
        }
        if(e.getKeyCode() == KeyEvent.VK_X){
            try {
                sp.writeBytes("B".getBytes());
            } catch (SerialPortException ex) {
                Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
            }
            printMsg("stop");
            System.out.println("stop");
        }
        if(e.getKeyCode() == KeyEvent.VK_SEMICOLON){
            try {
                sp.writeBytes("B".getBytes());
            } catch (SerialPortException ex) {
                Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
            }
            printMsg("stop");
            System.out.println("stop");
        }
        if(e.getKeyCode() == KeyEvent.VK_SLASH){
            try {
                sp.writeBytes("B".getBytes());
            } catch (SerialPortException ex) {
                Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
            }
            printMsg("stop");
            System.out.println("stop");
        }
        if(e.getKeyCode() == KeyEvent.VK_COMMA){
            try {
                sp.writeBytes("B".getBytes());
            } catch (SerialPortException ex) {
                Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
            }
            printMsg("stop");
            System.out.println("stop");
        }
        if(e.getKeyCode() == KeyEvent.VK_PERIOD){
            try {
                sp.writeBytes("B".getBytes());
            } catch (SerialPortException ex) {
                Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
            }
            printMsg("stop");
            System.out.println("stop");
        }
        if(e.getKeyCode() == KeyEvent.VK_EQUALS){
            try {
                sp.writeBytes("B".getBytes());
                printMsg("stop");
            } catch (SerialPortException ex) {
                Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            System.out.println("stop");
        }
        if(e.getKeyCode() == KeyEvent.VK_MINUS){
            try {
                sp.writeBytes("B".getBytes());
            } catch (SerialPortException ex) {
                Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
            }
            printMsg("stop");
            System.out.println("stop");
        }
        if(e.getKeyCode() == KeyEvent.VK_NUMPAD0){
            try {
                sp.writeBytes("B".getBytes());
            } catch (SerialPortException ex) {
                Logger.getLogger(Main2.class.getName()).log(Level.SEVERE, null, ex);
            }
            printMsg("stop");
            System.out.println("stop");
        }
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> Combobox;
    private javax.swing.JPanel arm;
    private javax.swing.JButton btn_SearchCOMPorts;
    private javax.swing.JButton btn_about;
    public javax.swing.JButton btn_acc1L;
    public javax.swing.JButton btn_acc1R;
    public javax.swing.JButton btn_acc2L;
    public javax.swing.JButton btn_acc2R;
    public javax.swing.JButton btn_backward;
    public javax.swing.JButton btn_baseL;
    public javax.swing.JButton btn_baseR;
    private javax.swing.JButton btn_cam_down;
    private javax.swing.JButton btn_cam_left;
    private javax.swing.JButton btn_cam_right;
    private javax.swing.JButton btn_cam_up;
    public javax.swing.JButton btn_claw_close;
    public javax.swing.JButton btn_claw_open;
    private javax.swing.JButton btn_connect;
    public static javax.swing.JToggleButton btn_debug;
    private javax.swing.JButton btn_disconnect;
    private javax.swing.JButton btn_exit;
    private javax.swing.JButton btn_extd_close;
    private javax.swing.JButton btn_extd_open;
    public static javax.swing.JButton btn_forward;
    private javax.swing.JButton btn_info;
    public javax.swing.JToggleButton btn_keyboard;
    public javax.swing.JButton btn_left;
    public javax.swing.JButton btn_pwm_0;
    public javax.swing.JButton btn_pwm_100;
    public javax.swing.JButton btn_pwm_50;
    public javax.swing.JButton btn_right;
    public static javax.swing.JButton btn_stop;
    public javax.swing.JButton btn_wrist_down;
    public javax.swing.JButton btn_wrist_left;
    public javax.swing.JButton btn_wrist_right;
    public javax.swing.JButton btn_wrist_up;
    private javax.swing.JPanel debugger;
    private javax.swing.JPanel footer;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JSlider slider_pwm;
    private javax.swing.JPanel speed;
    private javax.swing.JPanel title;
    public static javax.swing.JTextArea txt_msg;
    private javax.swing.JPanel wheel;
    // End of variables declaration//GEN-END:variables

    private void availableComPorts() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void keyTyped(KeyEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}